//
//  DatabaseHelerp.java
//  musicdav
//
//  Created by Andrew Tomaszewski on 2007.06.03.
//  Copyright 2007 __MyCompanyName__. All rights reserved.
//
package house.neko.media.master.webdav;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.PreparedStatement;

import java.text.DateFormat;
import java.text.StringCharacterIterator;

import java.util.Vector;
import java.util.Date;

import java.io.UnsupportedEncodingException;

import javax.naming.InitialContext;
import javax.naming.Context;

import javax.sql.DataSource;

/**
 *
 * @author andy
 */
public class DatabaseHelper
{
	private static DataSource ds = null;

	private static Boolean dslock = new Boolean(true);

	/**********************************
	This is the only way you should attempt to obtain a database connection.  When
	finished, you should <strong>always</strong> call {@link #closeResultSet(ResultSet rs)}.
	@throws java.lang.Exception
	@since 2006.07.24
	@return Will return a database connection or throw an Exception if unable to obtain a connection.
	**********************************/
	public static Connection getDatabaseConnection()
		throws java.lang.Exception
	{
		Context ctx = new InitialContext();
		if(ctx == null )
		{	throw new Exception("Boom - No Context"); }
		if(ds == null)
		{
			System.setProperty("informixLockModeWait", "180");
			synchronized(dslock)
			{	ds = (DataSource) ctx.lookup("java:comp/env/jdbc/Music"); }
		}

		if(ds == null)
		{	throw new Exception("Boom - No Datasource"); }

		Connection c = ds.getConnection();

		return c;
	}

	/**********************************
	@throws java.lang.Exception
	@deprecated This funcationality should be handled by each object
	@since 2006.07.24
	@param sql A complete SQL statement.
	@return A result set generated by the SQL statement.
	**********************************/
	@Deprecated
	public static ResultSet getSQL(String sql)
		throws java.lang.Exception
	{
		return getDatabaseConnection().createStatement().executeQuery(sql);
	}

	/**********************************
	@throws java.lang.Exception
	@deprecated This funcationality should be handled by each object
	@since 2006.07.24
	@param sql A complete SQL statement that is UPDATE/INSERT/DELETE.
	@return A result set generated by the SQL statement.
	**********************************/
	@Deprecated
	public static int updateSQL(String sql)
		throws java.lang.Exception
	{
		java.sql.Connection c = getDatabaseConnection();
		Statement s = c.createStatement();
		int updated = s.executeUpdate(sql);
		s.close();
		c.close();
		return updated;
	}

	/**********************************
	This will do the clean up of closing an open Statement, ResultSet and Connection if open.
	@since 2006.07.24
	@param rs An open ResultSet
	**********************************/
	public static void closeResultSet(ResultSet rs)
	{
		try
		{
			if(rs != null)
			{
				Statement s = rs.getStatement();
				rs.close();
				if(s != null)
				{
					Connection c = s.getConnection();
					s.close();
					if(c != null && !(c.isClosed()))
					{	c.close(); }
				}
			}
		} catch(Exception e) {
			//Common.handleException(e);
		}
	}

	/**
	 *
	 * @param c
	 */
	public static void closeConnection(java.sql.Connection c)
	{
		try
		{
			if(c != null)
			{
				c.close();
			}
		} catch(Exception e) { }
	}

}